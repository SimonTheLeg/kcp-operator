//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	operatorv1alpha1 "github.com/kcp-dev/kcp-operator/sdk/apis/operator/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp-operator/sdk/clientset/versioned"
	clientset "github.com/kcp-dev/kcp-operator/sdk/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp-operator/sdk/informers/externalversions/internalinterfaces"
	operatorv1alpha1listers "github.com/kcp-dev/kcp-operator/sdk/listers/operator/v1alpha1"
)

// CacheServerClusterInformer provides access to a shared informer and lister for
// CacheServers.
type CacheServerClusterInformer interface {
	Cluster(logicalcluster.Name) CacheServerInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() operatorv1alpha1listers.CacheServerClusterLister
}

type cacheServerClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewCacheServerClusterInformer constructs a new informer for CacheServer type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewCacheServerClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredCacheServerClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredCacheServerClusterInformer constructs a new informer for CacheServer type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredCacheServerClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().CacheServers().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().CacheServers().Watch(context.TODO(), options)
			},
		},
		&operatorv1alpha1.CacheServer{},
		resyncPeriod,
		indexers,
	)
}

func (f *cacheServerClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredCacheServerClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc},
		f.tweakListOptions,
	)
}

func (f *cacheServerClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&operatorv1alpha1.CacheServer{}, f.defaultInformer)
}

func (f *cacheServerClusterInformer) Lister() operatorv1alpha1listers.CacheServerClusterLister {
	return operatorv1alpha1listers.NewCacheServerClusterLister(f.Informer().GetIndexer())
}

// CacheServerInformer provides access to a shared informer and lister for
// CacheServers.
type CacheServerInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() operatorv1alpha1listers.CacheServerLister
}

func (f *cacheServerClusterInformer) Cluster(clusterName logicalcluster.Name) CacheServerInformer {
	return &cacheServerInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type cacheServerInformer struct {
	informer cache.SharedIndexInformer
	lister   operatorv1alpha1listers.CacheServerLister
}

func (f *cacheServerInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *cacheServerInformer) Lister() operatorv1alpha1listers.CacheServerLister {
	return f.lister
}

type cacheServerScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

func (f *cacheServerScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&operatorv1alpha1.CacheServer{}, f.defaultInformer)
}

func (f *cacheServerScopedInformer) Lister() operatorv1alpha1listers.CacheServerLister {
	return operatorv1alpha1listers.NewCacheServerLister(f.Informer().GetIndexer())
}

// NewCacheServerInformer constructs a new informer for CacheServer type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewCacheServerInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredCacheServerInformer(client, resyncPeriod, namespace, indexers, nil)
}

// NewFilteredCacheServerInformer constructs a new informer for CacheServer type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredCacheServerInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().CacheServers(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().CacheServers(namespace).Watch(context.TODO(), options)
			},
		},
		&operatorv1alpha1.CacheServer{},
		resyncPeriod,
		indexers,
	)
}

func (f *cacheServerScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredCacheServerInformer(client, resyncPeriod, f.namespace, cache.Indexers{
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, f.tweakListOptions)
}
