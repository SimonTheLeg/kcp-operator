//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"github.com/kcp-dev/kcp-operator/sdk/informers/externalversions/internalinterfaces"
)

type ClusterInterface interface {
	// CacheServers returns a CacheServerClusterInformer
	CacheServers() CacheServerClusterInformer
	// FrontProxies returns a FrontProxyClusterInformer
	FrontProxies() FrontProxyClusterInformer
	// Kubeconfigs returns a KubeconfigClusterInformer
	Kubeconfigs() KubeconfigClusterInformer
	// RootShards returns a RootShardClusterInformer
	RootShards() RootShardClusterInformer
	// Shards returns a ShardClusterInformer
	Shards() ShardClusterInformer
}

type version struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new ClusterInterface.
func New(f internalinterfaces.SharedInformerFactory, tweakListOptions internalinterfaces.TweakListOptionsFunc) ClusterInterface {
	return &version{factory: f, tweakListOptions: tweakListOptions}
}

// CacheServers returns a CacheServerClusterInformer
func (v *version) CacheServers() CacheServerClusterInformer {
	return &cacheServerClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// FrontProxies returns a FrontProxyClusterInformer
func (v *version) FrontProxies() FrontProxyClusterInformer {
	return &frontProxyClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// Kubeconfigs returns a KubeconfigClusterInformer
func (v *version) Kubeconfigs() KubeconfigClusterInformer {
	return &kubeconfigClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// RootShards returns a RootShardClusterInformer
func (v *version) RootShards() RootShardClusterInformer {
	return &rootShardClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// Shards returns a ShardClusterInformer
func (v *version) Shards() ShardClusterInformer {
	return &shardClusterInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

type Interface interface {
	// CacheServers returns a CacheServerInformer
	CacheServers() CacheServerInformer
	// FrontProxies returns a FrontProxyInformer
	FrontProxies() FrontProxyInformer
	// Kubeconfigs returns a KubeconfigInformer
	Kubeconfigs() KubeconfigInformer
	// RootShards returns a RootShardInformer
	RootShards() RootShardInformer
	// Shards returns a ShardInformer
	Shards() ShardInformer
}

type scopedVersion struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// New returns a new ClusterInterface.
func NewScoped(f internalinterfaces.SharedScopedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &scopedVersion{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

// CacheServers returns a CacheServerInformer
func (v *scopedVersion) CacheServers() CacheServerInformer {
	return &cacheServerScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// FrontProxies returns a FrontProxyInformer
func (v *scopedVersion) FrontProxies() FrontProxyInformer {
	return &frontProxyScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// Kubeconfigs returns a KubeconfigInformer
func (v *scopedVersion) Kubeconfigs() KubeconfigInformer {
	return &kubeconfigScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// RootShards returns a RootShardInformer
func (v *scopedVersion) RootShards() RootShardInformer {
	return &rootShardScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// Shards returns a ShardInformer
func (v *scopedVersion) Shards() ShardInformer {
	return &shardScopedInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}
