//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	operatorv1alpha1 "github.com/kcp-dev/kcp-operator/sdk/apis/operator/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp-operator/sdk/clientset/versioned"
	clientset "github.com/kcp-dev/kcp-operator/sdk/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp-operator/sdk/informers/externalversions/internalinterfaces"
	operatorv1alpha1listers "github.com/kcp-dev/kcp-operator/sdk/listers/operator/v1alpha1"
)

// FrontProxyClusterInformer provides access to a shared informer and lister for
// FrontProxies.
type FrontProxyClusterInformer interface {
	Cluster(logicalcluster.Name) FrontProxyInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() operatorv1alpha1listers.FrontProxyClusterLister
}

type frontProxyClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewFrontProxyClusterInformer constructs a new informer for FrontProxy type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFrontProxyClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredFrontProxyClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredFrontProxyClusterInformer constructs a new informer for FrontProxy type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredFrontProxyClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().FrontProxies().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().FrontProxies().Watch(context.TODO(), options)
			},
		},
		&operatorv1alpha1.FrontProxy{},
		resyncPeriod,
		indexers,
	)
}

func (f *frontProxyClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredFrontProxyClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc},
		f.tweakListOptions,
	)
}

func (f *frontProxyClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&operatorv1alpha1.FrontProxy{}, f.defaultInformer)
}

func (f *frontProxyClusterInformer) Lister() operatorv1alpha1listers.FrontProxyClusterLister {
	return operatorv1alpha1listers.NewFrontProxyClusterLister(f.Informer().GetIndexer())
}

// FrontProxyInformer provides access to a shared informer and lister for
// FrontProxies.
type FrontProxyInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() operatorv1alpha1listers.FrontProxyLister
}

func (f *frontProxyClusterInformer) Cluster(clusterName logicalcluster.Name) FrontProxyInformer {
	return &frontProxyInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type frontProxyInformer struct {
	informer cache.SharedIndexInformer
	lister   operatorv1alpha1listers.FrontProxyLister
}

func (f *frontProxyInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *frontProxyInformer) Lister() operatorv1alpha1listers.FrontProxyLister {
	return f.lister
}

type frontProxyScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

func (f *frontProxyScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&operatorv1alpha1.FrontProxy{}, f.defaultInformer)
}

func (f *frontProxyScopedInformer) Lister() operatorv1alpha1listers.FrontProxyLister {
	return operatorv1alpha1listers.NewFrontProxyLister(f.Informer().GetIndexer())
}

// NewFrontProxyInformer constructs a new informer for FrontProxy type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFrontProxyInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredFrontProxyInformer(client, resyncPeriod, namespace, indexers, nil)
}

// NewFilteredFrontProxyInformer constructs a new informer for FrontProxy type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredFrontProxyInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().FrontProxies(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().FrontProxies(namespace).Watch(context.TODO(), options)
			},
		},
		&operatorv1alpha1.FrontProxy{},
		resyncPeriod,
		indexers,
	)
}

func (f *frontProxyScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredFrontProxyInformer(client, resyncPeriod, f.namespace, cache.Indexers{
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, f.tweakListOptions)
}
