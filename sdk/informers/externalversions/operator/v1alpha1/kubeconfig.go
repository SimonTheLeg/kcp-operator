//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	operatorv1alpha1 "github.com/kcp-dev/kcp-operator/sdk/apis/operator/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp-operator/sdk/clientset/versioned"
	clientset "github.com/kcp-dev/kcp-operator/sdk/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp-operator/sdk/informers/externalversions/internalinterfaces"
	operatorv1alpha1listers "github.com/kcp-dev/kcp-operator/sdk/listers/operator/v1alpha1"
)

// KubeconfigClusterInformer provides access to a shared informer and lister for
// Kubeconfigs.
type KubeconfigClusterInformer interface {
	Cluster(logicalcluster.Name) KubeconfigInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() operatorv1alpha1listers.KubeconfigClusterLister
}

type kubeconfigClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewKubeconfigClusterInformer constructs a new informer for Kubeconfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewKubeconfigClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredKubeconfigClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredKubeconfigClusterInformer constructs a new informer for Kubeconfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredKubeconfigClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().Kubeconfigs().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().Kubeconfigs().Watch(context.TODO(), options)
			},
		},
		&operatorv1alpha1.Kubeconfig{},
		resyncPeriod,
		indexers,
	)
}

func (f *kubeconfigClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredKubeconfigClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc},
		f.tweakListOptions,
	)
}

func (f *kubeconfigClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&operatorv1alpha1.Kubeconfig{}, f.defaultInformer)
}

func (f *kubeconfigClusterInformer) Lister() operatorv1alpha1listers.KubeconfigClusterLister {
	return operatorv1alpha1listers.NewKubeconfigClusterLister(f.Informer().GetIndexer())
}

// KubeconfigInformer provides access to a shared informer and lister for
// Kubeconfigs.
type KubeconfigInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() operatorv1alpha1listers.KubeconfigLister
}

func (f *kubeconfigClusterInformer) Cluster(clusterName logicalcluster.Name) KubeconfigInformer {
	return &kubeconfigInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type kubeconfigInformer struct {
	informer cache.SharedIndexInformer
	lister   operatorv1alpha1listers.KubeconfigLister
}

func (f *kubeconfigInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *kubeconfigInformer) Lister() operatorv1alpha1listers.KubeconfigLister {
	return f.lister
}

type kubeconfigScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

func (f *kubeconfigScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&operatorv1alpha1.Kubeconfig{}, f.defaultInformer)
}

func (f *kubeconfigScopedInformer) Lister() operatorv1alpha1listers.KubeconfigLister {
	return operatorv1alpha1listers.NewKubeconfigLister(f.Informer().GetIndexer())
}

// NewKubeconfigInformer constructs a new informer for Kubeconfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewKubeconfigInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredKubeconfigInformer(client, resyncPeriod, namespace, indexers, nil)
}

// NewFilteredKubeconfigInformer constructs a new informer for Kubeconfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredKubeconfigInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().Kubeconfigs(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().Kubeconfigs(namespace).Watch(context.TODO(), options)
			},
		},
		&operatorv1alpha1.Kubeconfig{},
		resyncPeriod,
		indexers,
	)
}

func (f *kubeconfigScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredKubeconfigInformer(client, resyncPeriod, f.namespace, cache.Indexers{
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, f.tweakListOptions)
}
