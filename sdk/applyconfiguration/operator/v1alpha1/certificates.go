/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// CertificatesApplyConfiguration represents a declarative configuration of the Certificates type for use
// with apply.
type CertificatesApplyConfiguration struct {
	IssuerRef   *ObjectReferenceApplyConfiguration `json:"issuerRef,omitempty"`
	CASecretRef *v1.LocalObjectReference           `json:"caSecretRef,omitempty"`
}

// CertificatesApplyConfiguration constructs a declarative configuration of the Certificates type for use with
// apply.
func Certificates() *CertificatesApplyConfiguration {
	return &CertificatesApplyConfiguration{}
}

// WithIssuerRef sets the IssuerRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IssuerRef field is set to the value of the last call.
func (b *CertificatesApplyConfiguration) WithIssuerRef(value *ObjectReferenceApplyConfiguration) *CertificatesApplyConfiguration {
	b.IssuerRef = value
	return b
}

// WithCASecretRef sets the CASecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CASecretRef field is set to the value of the last call.
func (b *CertificatesApplyConfiguration) WithCASecretRef(value v1.LocalObjectReference) *CertificatesApplyConfiguration {
	b.CASecretRef = &value
	return b
}
