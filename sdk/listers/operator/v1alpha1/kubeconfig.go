//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	operatorv1alpha1 "github.com/kcp-dev/kcp-operator/sdk/apis/operator/v1alpha1"
)

// KubeconfigClusterLister can list Kubeconfigs across all workspaces, or scope down to a KubeconfigLister for one workspace.
// All objects returned here must be treated as read-only.
type KubeconfigClusterLister interface {
	// List lists all Kubeconfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.Kubeconfig, err error)
	// Cluster returns a lister that can list and get Kubeconfigs in one workspace.
	Cluster(clusterName logicalcluster.Name) KubeconfigLister
	KubeconfigClusterListerExpansion
}

type kubeconfigClusterLister struct {
	indexer cache.Indexer
}

// NewKubeconfigClusterLister returns a new KubeconfigClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewKubeconfigClusterLister(indexer cache.Indexer) *kubeconfigClusterLister {
	return &kubeconfigClusterLister{indexer: indexer}
}

// List lists all Kubeconfigs in the indexer across all workspaces.
func (s *kubeconfigClusterLister) List(selector labels.Selector) (ret []*operatorv1alpha1.Kubeconfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*operatorv1alpha1.Kubeconfig))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Kubeconfigs.
func (s *kubeconfigClusterLister) Cluster(clusterName logicalcluster.Name) KubeconfigLister {
	return &kubeconfigLister{indexer: s.indexer, clusterName: clusterName}
}

// KubeconfigLister can list Kubeconfigs across all namespaces, or scope down to a KubeconfigNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type KubeconfigLister interface {
	// List lists all Kubeconfigs in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.Kubeconfig, err error)
	// Kubeconfigs returns a lister that can list and get Kubeconfigs in one workspace and namespace.
	Kubeconfigs(namespace string) KubeconfigNamespaceLister
	KubeconfigListerExpansion
}

// kubeconfigLister can list all Kubeconfigs inside a workspace or scope down to a KubeconfigLister for one namespace.
type kubeconfigLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Kubeconfigs in the indexer for a workspace.
func (s *kubeconfigLister) List(selector labels.Selector) (ret []*operatorv1alpha1.Kubeconfig, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.Kubeconfig))
	})
	return ret, err
}

// Kubeconfigs returns an object that can list and get Kubeconfigs in one namespace.
func (s *kubeconfigLister) Kubeconfigs(namespace string) KubeconfigNamespaceLister {
	return &kubeconfigNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// kubeconfigNamespaceLister helps list and get Kubeconfigs.
// All objects returned here must be treated as read-only.
type KubeconfigNamespaceLister interface {
	// List lists all Kubeconfigs in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.Kubeconfig, err error)
	// Get retrieves the Kubeconfig from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*operatorv1alpha1.Kubeconfig, error)
	KubeconfigNamespaceListerExpansion
}

// kubeconfigNamespaceLister helps list and get Kubeconfigs.
// All objects returned here must be treated as read-only.
type kubeconfigNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all Kubeconfigs in the indexer for a given workspace and namespace.
func (s *kubeconfigNamespaceLister) List(selector labels.Selector) (ret []*operatorv1alpha1.Kubeconfig, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.Kubeconfig))
	})
	return ret, err
}

// Get retrieves the Kubeconfig from the indexer for a given workspace, namespace and name.
func (s *kubeconfigNamespaceLister) Get(name string) (*operatorv1alpha1.Kubeconfig, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(operatorv1alpha1.Resource("kubeconfigs"), name)
	}
	return obj.(*operatorv1alpha1.Kubeconfig), nil
}

// NewKubeconfigLister returns a new KubeconfigLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewKubeconfigLister(indexer cache.Indexer) *kubeconfigScopedLister {
	return &kubeconfigScopedLister{indexer: indexer}
}

// kubeconfigScopedLister can list all Kubeconfigs inside a workspace or scope down to a KubeconfigLister for one namespace.
type kubeconfigScopedLister struct {
	indexer cache.Indexer
}

// List lists all Kubeconfigs in the indexer for a workspace.
func (s *kubeconfigScopedLister) List(selector labels.Selector) (ret []*operatorv1alpha1.Kubeconfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.Kubeconfig))
	})
	return ret, err
}

// Kubeconfigs returns an object that can list and get Kubeconfigs in one namespace.
func (s *kubeconfigScopedLister) Kubeconfigs(namespace string) KubeconfigNamespaceLister {
	return &kubeconfigScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// kubeconfigScopedNamespaceLister helps list and get Kubeconfigs.
type kubeconfigScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Kubeconfigs in the indexer for a given workspace and namespace.
func (s *kubeconfigScopedNamespaceLister) List(selector labels.Selector) (ret []*operatorv1alpha1.Kubeconfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.Kubeconfig))
	})
	return ret, err
}

// Get retrieves the Kubeconfig from the indexer for a given workspace, namespace and name.
func (s *kubeconfigScopedNamespaceLister) Get(name string) (*operatorv1alpha1.Kubeconfig, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(operatorv1alpha1.Resource("kubeconfigs"), name)
	}
	return obj.(*operatorv1alpha1.Kubeconfig), nil
}
