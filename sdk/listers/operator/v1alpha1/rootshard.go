//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	operatorv1alpha1 "github.com/kcp-dev/kcp-operator/sdk/apis/operator/v1alpha1"
)

// RootShardClusterLister can list RootShards across all workspaces, or scope down to a RootShardLister for one workspace.
// All objects returned here must be treated as read-only.
type RootShardClusterLister interface {
	// List lists all RootShards in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.RootShard, err error)
	// Cluster returns a lister that can list and get RootShards in one workspace.
	Cluster(clusterName logicalcluster.Name) RootShardLister
	RootShardClusterListerExpansion
}

type rootShardClusterLister struct {
	indexer cache.Indexer
}

// NewRootShardClusterLister returns a new RootShardClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewRootShardClusterLister(indexer cache.Indexer) *rootShardClusterLister {
	return &rootShardClusterLister{indexer: indexer}
}

// List lists all RootShards in the indexer across all workspaces.
func (s *rootShardClusterLister) List(selector labels.Selector) (ret []*operatorv1alpha1.RootShard, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*operatorv1alpha1.RootShard))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get RootShards.
func (s *rootShardClusterLister) Cluster(clusterName logicalcluster.Name) RootShardLister {
	return &rootShardLister{indexer: s.indexer, clusterName: clusterName}
}

// RootShardLister can list RootShards across all namespaces, or scope down to a RootShardNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type RootShardLister interface {
	// List lists all RootShards in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.RootShard, err error)
	// RootShards returns a lister that can list and get RootShards in one workspace and namespace.
	RootShards(namespace string) RootShardNamespaceLister
	RootShardListerExpansion
}

// rootShardLister can list all RootShards inside a workspace or scope down to a RootShardLister for one namespace.
type rootShardLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all RootShards in the indexer for a workspace.
func (s *rootShardLister) List(selector labels.Selector) (ret []*operatorv1alpha1.RootShard, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.RootShard))
	})
	return ret, err
}

// RootShards returns an object that can list and get RootShards in one namespace.
func (s *rootShardLister) RootShards(namespace string) RootShardNamespaceLister {
	return &rootShardNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// rootShardNamespaceLister helps list and get RootShards.
// All objects returned here must be treated as read-only.
type RootShardNamespaceLister interface {
	// List lists all RootShards in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.RootShard, err error)
	// Get retrieves the RootShard from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*operatorv1alpha1.RootShard, error)
	RootShardNamespaceListerExpansion
}

// rootShardNamespaceLister helps list and get RootShards.
// All objects returned here must be treated as read-only.
type rootShardNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all RootShards in the indexer for a given workspace and namespace.
func (s *rootShardNamespaceLister) List(selector labels.Selector) (ret []*operatorv1alpha1.RootShard, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.RootShard))
	})
	return ret, err
}

// Get retrieves the RootShard from the indexer for a given workspace, namespace and name.
func (s *rootShardNamespaceLister) Get(name string) (*operatorv1alpha1.RootShard, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(operatorv1alpha1.Resource("rootshards"), name)
	}
	return obj.(*operatorv1alpha1.RootShard), nil
}

// NewRootShardLister returns a new RootShardLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewRootShardLister(indexer cache.Indexer) *rootShardScopedLister {
	return &rootShardScopedLister{indexer: indexer}
}

// rootShardScopedLister can list all RootShards inside a workspace or scope down to a RootShardLister for one namespace.
type rootShardScopedLister struct {
	indexer cache.Indexer
}

// List lists all RootShards in the indexer for a workspace.
func (s *rootShardScopedLister) List(selector labels.Selector) (ret []*operatorv1alpha1.RootShard, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.RootShard))
	})
	return ret, err
}

// RootShards returns an object that can list and get RootShards in one namespace.
func (s *rootShardScopedLister) RootShards(namespace string) RootShardNamespaceLister {
	return &rootShardScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// rootShardScopedNamespaceLister helps list and get RootShards.
type rootShardScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RootShards in the indexer for a given workspace and namespace.
func (s *rootShardScopedNamespaceLister) List(selector labels.Selector) (ret []*operatorv1alpha1.RootShard, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.RootShard))
	})
	return ret, err
}

// Get retrieves the RootShard from the indexer for a given workspace, namespace and name.
func (s *rootShardScopedNamespaceLister) Get(name string) (*operatorv1alpha1.RootShard, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(operatorv1alpha1.Resource("rootshards"), name)
	}
	return obj.(*operatorv1alpha1.RootShard), nil
}
