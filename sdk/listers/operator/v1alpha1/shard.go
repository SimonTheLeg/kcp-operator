//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	operatorv1alpha1 "github.com/kcp-dev/kcp-operator/sdk/apis/operator/v1alpha1"
)

// ShardClusterLister can list Shards across all workspaces, or scope down to a ShardLister for one workspace.
// All objects returned here must be treated as read-only.
type ShardClusterLister interface {
	// List lists all Shards in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.Shard, err error)
	// Cluster returns a lister that can list and get Shards in one workspace.
	Cluster(clusterName logicalcluster.Name) ShardLister
	ShardClusterListerExpansion
}

type shardClusterLister struct {
	indexer cache.Indexer
}

// NewShardClusterLister returns a new ShardClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewShardClusterLister(indexer cache.Indexer) *shardClusterLister {
	return &shardClusterLister{indexer: indexer}
}

// List lists all Shards in the indexer across all workspaces.
func (s *shardClusterLister) List(selector labels.Selector) (ret []*operatorv1alpha1.Shard, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*operatorv1alpha1.Shard))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Shards.
func (s *shardClusterLister) Cluster(clusterName logicalcluster.Name) ShardLister {
	return &shardLister{indexer: s.indexer, clusterName: clusterName}
}

// ShardLister can list Shards across all namespaces, or scope down to a ShardNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type ShardLister interface {
	// List lists all Shards in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.Shard, err error)
	// Shards returns a lister that can list and get Shards in one workspace and namespace.
	Shards(namespace string) ShardNamespaceLister
	ShardListerExpansion
}

// shardLister can list all Shards inside a workspace or scope down to a ShardLister for one namespace.
type shardLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Shards in the indexer for a workspace.
func (s *shardLister) List(selector labels.Selector) (ret []*operatorv1alpha1.Shard, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.Shard))
	})
	return ret, err
}

// Shards returns an object that can list and get Shards in one namespace.
func (s *shardLister) Shards(namespace string) ShardNamespaceLister {
	return &shardNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// shardNamespaceLister helps list and get Shards.
// All objects returned here must be treated as read-only.
type ShardNamespaceLister interface {
	// List lists all Shards in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.Shard, err error)
	// Get retrieves the Shard from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*operatorv1alpha1.Shard, error)
	ShardNamespaceListerExpansion
}

// shardNamespaceLister helps list and get Shards.
// All objects returned here must be treated as read-only.
type shardNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all Shards in the indexer for a given workspace and namespace.
func (s *shardNamespaceLister) List(selector labels.Selector) (ret []*operatorv1alpha1.Shard, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.Shard))
	})
	return ret, err
}

// Get retrieves the Shard from the indexer for a given workspace, namespace and name.
func (s *shardNamespaceLister) Get(name string) (*operatorv1alpha1.Shard, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(operatorv1alpha1.Resource("shards"), name)
	}
	return obj.(*operatorv1alpha1.Shard), nil
}

// NewShardLister returns a new ShardLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewShardLister(indexer cache.Indexer) *shardScopedLister {
	return &shardScopedLister{indexer: indexer}
}

// shardScopedLister can list all Shards inside a workspace or scope down to a ShardLister for one namespace.
type shardScopedLister struct {
	indexer cache.Indexer
}

// List lists all Shards in the indexer for a workspace.
func (s *shardScopedLister) List(selector labels.Selector) (ret []*operatorv1alpha1.Shard, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.Shard))
	})
	return ret, err
}

// Shards returns an object that can list and get Shards in one namespace.
func (s *shardScopedLister) Shards(namespace string) ShardNamespaceLister {
	return &shardScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// shardScopedNamespaceLister helps list and get Shards.
type shardScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Shards in the indexer for a given workspace and namespace.
func (s *shardScopedNamespaceLister) List(selector labels.Selector) (ret []*operatorv1alpha1.Shard, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.Shard))
	})
	return ret, err
}

// Get retrieves the Shard from the indexer for a given workspace, namespace and name.
func (s *shardScopedNamespaceLister) Get(name string) (*operatorv1alpha1.Shard, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(operatorv1alpha1.Resource("shards"), name)
	}
	return obj.(*operatorv1alpha1.Shard), nil
}
