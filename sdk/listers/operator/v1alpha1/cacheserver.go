//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	operatorv1alpha1 "github.com/kcp-dev/kcp-operator/sdk/apis/operator/v1alpha1"
)

// CacheServerClusterLister can list CacheServers across all workspaces, or scope down to a CacheServerLister for one workspace.
// All objects returned here must be treated as read-only.
type CacheServerClusterLister interface {
	// List lists all CacheServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.CacheServer, err error)
	// Cluster returns a lister that can list and get CacheServers in one workspace.
	Cluster(clusterName logicalcluster.Name) CacheServerLister
	CacheServerClusterListerExpansion
}

type cacheServerClusterLister struct {
	indexer cache.Indexer
}

// NewCacheServerClusterLister returns a new CacheServerClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewCacheServerClusterLister(indexer cache.Indexer) *cacheServerClusterLister {
	return &cacheServerClusterLister{indexer: indexer}
}

// List lists all CacheServers in the indexer across all workspaces.
func (s *cacheServerClusterLister) List(selector labels.Selector) (ret []*operatorv1alpha1.CacheServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*operatorv1alpha1.CacheServer))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get CacheServers.
func (s *cacheServerClusterLister) Cluster(clusterName logicalcluster.Name) CacheServerLister {
	return &cacheServerLister{indexer: s.indexer, clusterName: clusterName}
}

// CacheServerLister can list CacheServers across all namespaces, or scope down to a CacheServerNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type CacheServerLister interface {
	// List lists all CacheServers in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.CacheServer, err error)
	// CacheServers returns a lister that can list and get CacheServers in one workspace and namespace.
	CacheServers(namespace string) CacheServerNamespaceLister
	CacheServerListerExpansion
}

// cacheServerLister can list all CacheServers inside a workspace or scope down to a CacheServerLister for one namespace.
type cacheServerLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all CacheServers in the indexer for a workspace.
func (s *cacheServerLister) List(selector labels.Selector) (ret []*operatorv1alpha1.CacheServer, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.CacheServer))
	})
	return ret, err
}

// CacheServers returns an object that can list and get CacheServers in one namespace.
func (s *cacheServerLister) CacheServers(namespace string) CacheServerNamespaceLister {
	return &cacheServerNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// cacheServerNamespaceLister helps list and get CacheServers.
// All objects returned here must be treated as read-only.
type CacheServerNamespaceLister interface {
	// List lists all CacheServers in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1alpha1.CacheServer, err error)
	// Get retrieves the CacheServer from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*operatorv1alpha1.CacheServer, error)
	CacheServerNamespaceListerExpansion
}

// cacheServerNamespaceLister helps list and get CacheServers.
// All objects returned here must be treated as read-only.
type cacheServerNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all CacheServers in the indexer for a given workspace and namespace.
func (s *cacheServerNamespaceLister) List(selector labels.Selector) (ret []*operatorv1alpha1.CacheServer, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.CacheServer))
	})
	return ret, err
}

// Get retrieves the CacheServer from the indexer for a given workspace, namespace and name.
func (s *cacheServerNamespaceLister) Get(name string) (*operatorv1alpha1.CacheServer, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(operatorv1alpha1.Resource("cacheservers"), name)
	}
	return obj.(*operatorv1alpha1.CacheServer), nil
}

// NewCacheServerLister returns a new CacheServerLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewCacheServerLister(indexer cache.Indexer) *cacheServerScopedLister {
	return &cacheServerScopedLister{indexer: indexer}
}

// cacheServerScopedLister can list all CacheServers inside a workspace or scope down to a CacheServerLister for one namespace.
type cacheServerScopedLister struct {
	indexer cache.Indexer
}

// List lists all CacheServers in the indexer for a workspace.
func (s *cacheServerScopedLister) List(selector labels.Selector) (ret []*operatorv1alpha1.CacheServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.CacheServer))
	})
	return ret, err
}

// CacheServers returns an object that can list and get CacheServers in one namespace.
func (s *cacheServerScopedLister) CacheServers(namespace string) CacheServerNamespaceLister {
	return &cacheServerScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// cacheServerScopedNamespaceLister helps list and get CacheServers.
type cacheServerScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CacheServers in the indexer for a given workspace and namespace.
func (s *cacheServerScopedNamespaceLister) List(selector labels.Selector) (ret []*operatorv1alpha1.CacheServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*operatorv1alpha1.CacheServer))
	})
	return ret, err
}

// Get retrieves the CacheServer from the indexer for a given workspace, namespace and name.
func (s *cacheServerScopedNamespaceLister) Get(name string) (*operatorv1alpha1.CacheServer, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(operatorv1alpha1.Resource("cacheservers"), name)
	}
	return obj.(*operatorv1alpha1.CacheServer), nil
}
